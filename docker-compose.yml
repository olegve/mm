# Разработка приложения
name: mm

volumes:
  db_value:
  static:
  media:


services:
  # Django конфигурация
  web-app:
    build:
      context: ./${DJANGO_PROJECT_NAME}
    ports:
      - "8000:8000"
    volumes:
      # Смотри Dockerfile
      # Пробрасываем локальную папку приложения Django в docker.
      # При изменении кода не нужно перестраивать контейнер.
      - ./${DJANGO_PROJECT_NAME}:/${DJANGO_PROJECT_NAME}
    command: >
      sh -c "python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    depends_on:
      - database
      - redis
#      - worker


  # Postgres конфигурация
  # Внешний порт из контейнера берём из переменной окружения.
  # Из этой же переменной (DB_PORT) Django берёт номер порта для связи с базой данных.
  database:
    image: postgres:16.2-alpine3.19
    ports:
      - "${DB_PORT}:5432"
    env_file:
      - .env
    volumes:
      - db_value:/var/lib/postgresql/data/


  # Redis конфигурация
  redis:
    image: redis:7.2.4-alpine3.19
    hostname: redis


#  # Celery worker конфигурация
#  worker:
#    build:
#      context: .
#    hostname: worker
#    entrypoint: celery
#    command: -A ${DJANGO_PROJECT_NAME} worker -l INFO
#    volumes:
#      # Смотри Dockerfile и Django web-app.
#      # Пробрасываем локальную папку приложения Django в docker.
#      # При изменении кода не нужно перестраивать контейнер.
#      - ./${DJANGO_PROJECT_NAME}:/${DJANGO_PROJECT_NAME}
#    links:
#      - redis
#    depends_on:
#      - redis
#      - database
#    env_file:
#      - .env


#  # Flower конфигурация
#  flower:
#    build:
#      context: .
#    hostname: flower
#    entrypoint: celery
#    command: -A ${DJANGO_PROJECT_NAME} flower -l INFO
#    volumes:
#      # Смотри Dockerfile и Django web-app.
#      # Пробрасываем локальную папку приложения Django в docker.
#      # При изменении кода не нужно перестраивать контейнер.
#      - ./${DJANGO_PROJECT_NAME}:/${DJANGO_PROJECT_NAME}
#    links:
#      - redis
#    depends_on:
#      - worker
#      - worker2
#    ports:
#      - "5555:5555"
#    env_file:
#      - .env


#  # Celery worker2 конфигурация
#  worker2:
#    build:
#      context: .
#    hostname: worker2
#    entrypoint: celery
#    command: -A ${DJANGO_PROJECT_NAME} worker -l INFO
#    volumes:
#      # Смотри Dockerfile и Django web-app.
#      # Пробрасываем локальную папку приложения Django в docker.
#      # При изменении кода не нужно перестраивать контейнер.
#      - ./${DJANGO_PROJECT_NAME}:/${DJANGO_PROJECT_NAME}
#    links:
#      - redis
#    depends_on:
#      - redis
#      - database
#    env_file:
#      - .env
